@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Data;
@using Newtonsoft.Json
@using Backend.SortModels
@using Backend.Services
@using Backend.AdapterModels
@using DataAccessLayer.Models
@using ShareDomain.DataModels
@using AutoMapper
@inherits DataAdaptor<IHoluserService>
@inject IMapper Mapper

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public SortCondition CurrentSortCondition { get; set; }

    /// <summary>
    /// 透過 Service 使用 Entity Framework Core 來讀取資料庫內的紀錄出來
    /// </summary>
    /// <param name="dataManagerRequest"></param>
    /// <param name="key"></param>
    /// <returns></returns>
    public override async Task<object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
    {
        IQueryable<Holuser> DataSource = await Service.GetAsync();

        #region 進行搜尋動作
        if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
        {
            var keyword = dataManagerRequest.Search[0].Key;
            DataSource = DataSource
                .Where(x => x.Name.Contains(keyword) || x.Account.Contains(key));
        }
        #endregion

        #region 進行排序動作
        if (CurrentSortCondition != null)
        {
            switch (CurrentSortCondition.Id)
            {
                case (int)HoluserSortEnum.NameDescending:
                    DataSource = DataSource.OrderByDescending(x => x.Name);
                    break;
                case (int)HoluserSortEnum.NameAscending:
                    DataSource = DataSource.OrderBy(x => x.Name);
                    break;
                case (int)HoluserSortEnum.AccountDescending:
                    DataSource = DataSource.OrderByDescending(x => x.Account);
                    break;
                case (int)HoluserSortEnum.AccountAscending:
                    DataSource = DataSource.OrderBy(x => x.Account);
                    break;
                default:
                    DataSource = DataSource.OrderBy(x => x.Name);
                    break;
            }
        }
        #endregion

        if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
        {
            // 進行過濾動作
            DataSource = DataOperations.PerformFiltering(DataSource, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
        }

        // 取得記錄總數量，將要用於分頁元件面板使用
        int count = DataSource.Cast<Holuser>().Count();

        #region 進行分頁處理
        if (dataManagerRequest.Skip != 0)
        {
            //分頁
            DataSource = DataOperations.PerformSkip(DataSource, dataManagerRequest.Skip);
        }
        if (dataManagerRequest.Take != 0)
        {
            DataSource = DataOperations.PerformTake(DataSource, dataManagerRequest.Take);
        }
        #endregion

        #region 想要做 Table Join 的查詢，也可以在這裡進行呼叫

        #endregion

        List<HoluserAdapterModel> adaptorModelObjects =
        Mapper.Map<List<HoluserAdapterModel>>(DataSource);


        #region 在這裡進行 轉接器 資料模型 的額外屬性初始化
        foreach (var adaptorModelItem in adaptorModelObjects)
        {
            // ??? 這裡需要完成管理者人員的相關資料讀取程式碼
        }
        #endregion

        var item = dataManagerRequest.RequiresCounts
        ? new DataResult() { Result = adaptorModelObjects, Count = count }
        : (object)adaptorModelObjects;
        await Task.Yield();
        return item;
    }
}